spring.application.name=filme

server.port=8080

spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=***
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA (Hibernate) settings
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.default_schema=streaming
spring.jpa.hibernate.ddl-auto=update

service.url.pessoa.getbyid=http://pessoa:8081/pessoa/%s

# Kafka
spring.kafka.bootstrap-servers=kafka:9092
kafka.topic.notify.pessoa=Topico1

#OAuth2
spring.security.oauth2.client.registration.my-client.client-id=streaming
spring.security.oauth2.client.registration.my-client.client-secret=APpAVE2mJ3RF53ELVmzXmf7oABUKqwHK
spring.security.oauth2.client.registration.my-client.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.my-client.scope=openid
spring.security.oauth2.client.registration.my-client.token-uri=http://keycloak:8080/realms/streaming/protocol/openid-connect/token
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/streaming/protocol/openid-connect/certs

spring.security.oauth2.client.registration.my-client.provider=my-provider
spring.security.oauth2.client.provider.my-provider.token-uri=https://keycloak:8080/auth/realms/streaming/protocol/openid-connect/token
spring.security.oauth2.client.provider.my-provider.authorization-uri=https://keycloak:8080/auth/realms/streaming/protocol/openid-connect/auth
spring.security.oauth2.client.provider.my-provider.user-info-uri=https://keycloak:8080/auth/realms/streaming/protocol/openid-connect/userinfo
